#!/usr/bin/env ruby

require 'httparty'
require 'json'
require 'pp'

# ElasticSearch location
HOST  = 'localhost'
PORT  = '9200'

# Index and document type name
INDEX = 'elasticsearch-by-example'
TYPE  = 'example'

# URLs
base_url  = "http://#{HOST}:#{PORT}"
index_url = "#{base_url}/#{INDEX}"
type_url  = "#{index_url}/#{TYPE}"

# Endpoints
type_mapping_endpoint  = "#{type_url}/_mapping"
index_refresh_endpoint = "#{index_url}/_refresh"
type_search_endpoint   = "#{type_url}/_search"

# Path to example directory read from console parameter
path = "examples/#{ARGV[0]}"

# Remove index from last run if exists
index_delete_response_code = HTTParty.delete(index_url).response.code
puts "Delete index : #{index_url}" if index_delete_response_code == "200"

# Create index. Explicit index creation is especially important when applying
# a custom mapping.
HTTParty.put(index_url)

# Apply mapping if present, else ElasticSearch will use default mapping.
mapping_file_path = "#{path}/mapping.json"
if File.exists?(mapping_file_path)
  mapping = File.read(mapping_file_path)
  HTTParty.put(type_mapping_endpoint, {:body => mapping})
  puts "Put mapping  : #{type_mapping_endpoint}"
end

# Index documents
docs_file_path = "#{path}/docs.json"
docs = JSON.parse(File.read(docs_file_path))
docs.each_with_index do |doc, i|
  document_url = "#{type_url}/#{i}"
  HTTParty.put(document_url, {:body => doc.to_json})
  puts "Put document : #{document_url}"
end

# Refresh index to make indexed documents available for search
HTTParty.post(index_refresh_endpoint)
puts "Post refresh : #{index_refresh_endpoint}"

# Query index
query_file_path = "#{path}/query.json"
query = File.read(query_file_path)
response = HTTParty.post(type_search_endpoint, {:body => query})
puts "Post search  : #{type_search_endpoint}"
puts "Result"
puts "------"
pp response.parsed_response
